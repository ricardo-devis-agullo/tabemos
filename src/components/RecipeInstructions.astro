---
import { Image } from 'astro:assets';
import type { Recipe, Ingredient } from '../recipes';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;

function assertNever(x: never): never {
  throw new Error(`Unexpected object: ${x}`);
}

function formatUnit(unit: number): string {
  switch (unit) {
    case 1 / 4:
      return '1/4';
    case 1 / 2:
      return '1/2';
    case 1 + 1 / 2:
      return '1 y 1/2';
    default:
      return String(unit);
  }
}

function areIngredientsBySection(
  ingredients:
    | ReadonlyArray<Ingredient>
    | Record<string, ReadonlyArray<Ingredient>>,
): ingredients is Record<string, ReadonlyArray<Ingredient>> {
  return !Array.isArray(ingredients);
}

function pluralize(word: string, count: number): string {
  return count > 1 ? `${word}s` : word;
}

function formatIngredient({ name, measurement, quantity }: Ingredient): string {
  switch (measurement) {
    case 'cucharada':
      return `${formatUnit(quantity)} ${pluralize('cucharada', quantity)} de ${name}`;
    case 'cucharilla':
      return `${formatUnit(quantity)} ${pluralize('cucharilla', quantity)} de ${name}`;
    case 'mililitro':
      return `${quantity} ${pluralize('mililitro', quantity)} de ${name}`;
    case 'litro':
      return `${quantity} ${pluralize('litro', quantity)} de ${name}`;
    case 'gramo':
      return `${quantity}g de ${name}`;
    case 'manojo':
      return `${quantity} ${pluralize('manojo', quantity)} de ${name}`;
    case 'pellizco':
      return `${quantity} ${pluralize('pellizco', quantity)} de ${name}`;
    case 'unidad':
      return `${formatUnit(quantity)} ${name}`;
    case 'vaso':
      return `${quantity} ${pluralize('vaso', quantity)} de ${name}`;
    default:
      return assertNever(measurement);
  }
}
---

<div class="recipe-instructions">
<div class="serving">
  <h3 class="my-6 text-4xl inline-block">Ingredientes</h3>
  <span>{`(${recipe.serving} ${pluralize('persona', recipe.serving)})`}</span>
</div>
{
  !areIngredientsBySection(recipe.ingredients) ? (
    <ul>
      {recipe.ingredients.map((ingredient) => (
        <li itemprop="recipeIngredient" class="my-2">{formatIngredient(ingredient)}</li>
      ))}
    </ul>
  ) : (
    Object.entries(recipe.ingredients).map(([section, ingredients]) => (
      <div>
        <h5 class="font-bold underline uppercase my-2">{section}</h5>
        <ul class="list-none">
          {ingredients.map((ingredient) => (
            <li itemprop="recipeIngredient" class="my-2">{formatIngredient(ingredient)}</li>
          ))}
        </ul>
      </div>
    ))
  )
}
<div class="serving">
  <h3 class="inline-block text-xl mt-6">Instrucciones</h3>
  {
    recipe.steps.map((step, idx) => (
      <div class="instruction-step" itemprop="recipeInstructions">
        {step.photo && (
          <Image
            width={200}
            height={150}
            class="float object-cover recipe-step-image"
            alt="Recipe"
            src={import(`../photos/${recipe.slug}-${step.photo}.jpg`)}
          />
        )}
  <div class="step-number">{idx + 1}</div>
  <p class="step-content">{step.instruction}</p>
      </div>
    ))
  }
</div>
</div>

<style>
  .recipe-instructions {
  /* Create an elegant container */
  max-width: 800px;
  margin: 3rem auto;
  padding: 2.5rem;
  background: linear-gradient(to bottom, #fcfcfc, #fafafa);
  border-radius: 2px;
  box-shadow: 
    0 1px 3px rgba(0, 0, 0, 0.02),
    0 8px 32px rgba(0, 0, 0, 0.04);
}

.instruction-step {
  /* Sophisticated step styling */
  display: grid;
  grid-template-columns: minmax(40px, auto) 1fr;
  gap: 2rem;
  padding: 2rem 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
  transition: transform 0.2s ease;
}

.step-number {
  /* Elegant numbering */
  font-family: 'Playfair Display', serif;
  font-size: 2.5rem;
  color: #2c2c2c;
  opacity: 0.3;
  font-weight: 300;
  line-height: 1;
}

.step-content {
  /* Refined typography */
  font-family: 'Inter', sans-serif;
  font-size: 1.125rem;
  line-height: 1.8;
  color: #333;
  letter-spacing: -0.011em;
}

/* Subtle hover interaction */
.instruction-step:hover {
  transform: translateX(8px);
}

/* Time indicators */
.time-indicator {
  display: inline-block;
  font-family: 'Inter', sans-serif;
  font-size: 0.875rem;
  color: #666;
  background: rgba(0, 0, 0, 0.03);
  padding: 0.25rem 0.75rem;
  border-radius: 100px;
  margin-top: 0.5rem;
}

/* Important notes */
.instruction-note {
  font-style: italic;
  color: #666;
  background: rgba(255, 249, 235, 0.8);
  padding: 1rem;
  margin-top: 0.5rem;
  border-left: 2px solid #E9B949;
}

.recipe-step-image {
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #00000014;
  }

@media (max-width: 768px) {
  .recipe-instructions {
    padding: 1.5rem;
    margin: 1.5rem;
  }
  
  .instruction-step {
    gap: 1rem;
  }
  
  .step-number {
    font-size: 2rem;
  }
}
</style>
