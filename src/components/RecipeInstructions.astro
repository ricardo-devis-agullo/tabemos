---
import { Image } from 'astro:assets';
import type { Recipe, Ingredient } from '../recipes';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;

function assertNever(x: never): never {
  throw new Error(`Unexpected object: ${x}`);
}

function formatUnit(unit: number): string {
  switch (unit) {
    case 1 / 4:
      return '1/4';
    case 1 / 2:
      return '1/2';
    case 1 + 1 / 2:
      return '1 y 1/2';
    default:
      return String(unit);
  }
}

function areIngredientsBySection(
  ingredients:
    | ReadonlyArray<Ingredient>
    | Record<string, ReadonlyArray<Ingredient>>,
): ingredients is Record<string, ReadonlyArray<Ingredient>> {
  return !Array.isArray(ingredients);
}

function pluralize(word: string, count: number): string {
  return count > 1 ? `${word}s` : word;
}

function formatIngredient({ name, measurement, quantity }: Ingredient): string {
  switch (measurement) {
    case 'cucharada':
      return `${formatUnit(quantity)} ${pluralize('cucharada', quantity)} de ${name}`;
    case 'cucharilla':
      return `${formatUnit(quantity)} ${pluralize('cucharilla', quantity)} de ${name}`;
    case 'mililitro':
      return `${quantity} ${pluralize('mililitro', quantity)} de ${name}`;
    case 'litro':
      return `${quantity} ${pluralize('litro', quantity)} de ${name}`;
    case 'gramo':
      return `${quantity}g de ${name}`;
    case 'manojo':
      return `${quantity} ${pluralize('manojo', quantity)} de ${name}`;
    case 'pellizco':
      return `${quantity} ${pluralize('pellizco', quantity)} de ${name}`;
    case 'unidad':
      return `${formatUnit(quantity)} ${name}`;
    case 'vaso':
      return `${quantity} ${pluralize('vaso', quantity)} de ${name}`;
    default:
      return assertNever(measurement);
  }
}
---

<div class="serving">
  <h3 class="my-6 text-4xl inline-block">Ingredientes</h3>
  <span>{`(${recipe.serving} ${pluralize('persona', recipe.serving)})`}</span>
</div>
{
  !areIngredientsBySection(recipe.ingredients) ? (
    <ul>
      {recipe.ingredients.map((ingredient) => (
        <li itemprop="recipeIngredient" class="my-2">{formatIngredient(ingredient)}</li>
      ))}
    </ul>
  ) : (
    Object.entries(recipe.ingredients).map(([section, ingredients]) => (
      <div>
        <h5 class="font-bold underline uppercase my-2">{section}</h5>
        <ul class="list-none">
          {ingredients.map((ingredient) => (
            <li itemprop="recipeIngredient" class="my-2">{formatIngredient(ingredient)}</li>
          ))}
        </ul>
      </div>
    ))
  )
}
<div class="serving">
  <h3 class="inline-block text-xl mt-6">Instrucciones</h3>
  {
    recipe.steps.map((step, idx) => (
      <div class="my-8 flex" itemprop="recipeInstructions">
        {step.photo && (
          <Image
            width={200}
            height={150}
            class="float object-cover"
            alt="Recipe"
            src={import(`../photos/${recipe.slug}-${step.photo}.jpg`)}
          />
        )}
        <div class="flex space-x-2">
          <span class="bg-slate-200 w-8 text-center">{idx + 1}</span>
          <p>{step.instruction}</p>
        </div>
      </div>
    ))
  }
</div>
